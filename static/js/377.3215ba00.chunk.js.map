{"version":3,"file":"static/js/377.3215ba00.chunk.js","mappings":"mTAGAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACpBC,QAHY,mCAIZC,SAAU,QACVC,eAAe,GAGZ,IAAMC,EAAiB,mCAAG,oGACRJ,EAAAA,EAAAA,IAAA,oBADQ,cACzBK,EADyB,yBAKxBA,EAASC,KAAKC,SALU,2CAAH,qDAQjBC,EAAc,mCAAG,WAAOC,GAAP,uFACHT,EAAAA,EAAAA,IAAA,6BACGS,IAFA,cACpBJ,EADoB,yBAKjBA,EAASC,KAAKC,SALG,2CAAH,sDAQdG,EAAe,mCAAG,WAAOC,GAAP,uFACJX,EAAAA,EAAAA,IAAA,gBACVW,IAFc,cACrBN,EADqB,yBAKlBA,EAASC,MALS,2CAAH,sDAQfM,EAAa,mCAAG,WAAOD,GAAP,uFACFX,EAAAA,EAAAA,IAAA,gBACVW,EADU,aADE,cACnBN,EADmB,yBAKhBA,EAASC,KAAKO,MALE,2CAAH,sDAQbC,EAAe,mCAAG,WAAOH,GAAP,uFACJX,EAAAA,EAAAA,IAAA,gBACVW,EADU,aADI,cACrBN,EADqB,yBAKlBA,EAASC,KAAKC,SALI,2CAAH,qD,0MCvCfQ,GAAWC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,sSAeRE,EAAYF,EAAAA,GAAAA,IAAH,wDAKTG,EAAmBH,EAAAA,GAAAA,IAAH,wFAMhBI,GAAaJ,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,yUAkBVK,EAAcL,EAAAA,GAAAA,GAAH,+DAKXM,EAAkBN,EAAAA,GAAAA,EAAH,0G,SC2C5B,EAhFqB,WAAO,IAAD,IACzB,GAAwCO,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACQd,GAAYe,EAAAA,EAAAA,MAAZf,QAEFgB,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,KAE7CC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,uFACXrB,EADW,0EAKKsB,EAAAA,GAAqBtB,GAL1B,OAKRL,EALQ,OAOdmB,EAAgBnB,GAPF,gDASd4B,QAAQC,IAAR,MATc,yDAAH,qDAYfH,GACD,GAAE,CAACrB,IAEJ,IAAQyB,EAAuDZ,EAAvDY,MAAOC,EAAgDb,EAAhDa,YAAaC,EAAmCd,EAAnCc,aAAcC,EAAqBf,EAArBe,SAAUC,EAAWhB,EAAXgB,OAEpD,OACE,6BACE,UAACzB,EAAD,CAAU0B,GAAId,EAAd,WACE,SAAC,MAAD,CAAoBe,KAAM,KAD5B,iBAME,iCACE,UAACxB,EAAD,YACE,gBACEyB,IACEN,EAAW,wCAC0BA,GACjCO,EAENC,MAAM,QACNC,IAAKV,KAEP,UAACjB,EAAD,YACE,wBAAKiB,KACL,UAACd,EAAD,2BACc,4BAAOgB,EAAP,YAEd,sCACA,SAAChB,EAAD,UAAkBiB,KAClB,mCACCC,IACC,SAAClB,EAAD,UACGkB,EAAOO,KAAI,qBAAGC,IAAH,IAAoBC,KAAK,cAK7C,SAAC3B,EAAD,yCAGJ,UAACD,EAAD,YACE,yBACE,SAACD,EAAD,CAAYqB,GAAG,OAAOZ,MAAO,CAAEC,KAAM,KAArC,mBADM,SAKR,yBACE,SAACV,EAAD,CAAYqB,GAAG,UAAUZ,MAAO,CAAEC,KAAM,KAAxC,sBADM,eAMV,SAAC,EAAAoB,SAAD,CAAUC,UAAU,gDAApB,UACE,SAAC,KAAD,CAAQC,GAAIzC,QAInB,C","sources":["api-service/film-service.js","pages/MovieDetalis/MovieDetalis.styled.jsx","pages/MovieDetalis/MovieDetalis.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'bcffd2e7e681aa94b83a55719216dc7b';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n    api_key: API_KEY,\n    language: 'en-US',\n    include_adult: false,\n  };\n\nexport const getTrandingMovies = async () => {\n  const response = await axios.get(\n    `trending/all/day`\n  );\n  // console.log(response)\n  return response.data.results;\n}\n\nexport const getSearchMovie = async (query) => {\n    const response = await axios.get(\n        `search/movie?query=${query}`\n      );\n      // console.log(response.data.results)\n      return response.data.results;\n}\n\nexport const getMovieDetails = async (movieId) => {\n    const response = await axios.get(\n        `movie/${movieId}`\n      );\n      // console.log(response.data)\n      return response.data;\n}\n\nexport const getMovieRoles = async (movieId) => {\n    const response = await axios.get(\n        `movie/${movieId}/credits`\n      );\n      // console.log(response.data.cast)\n      return response.data.cast;\n}\n\nexport const getMovieReviews = async (movieId) => {\n    const response = await axios.get(\n        `movie/${movieId}/reviews`\n      );\n      // console.log(response.data.results)\n      return response.data.results;\n}","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const BackLink = styled(NavLink)`\n  display: flex;\n  align-items: flex-end;\n  gap: 8px;\n  padding: 10px 10px;\n  width: 130px;\n  border-radius: 4px;\n  text-decoration: none;\n  color: #141314;\n  background-color: #dfebe8;\n  /*  */\n  font-weight: 500;\n  font-size: 18px;\n  margin-bottom: 15px;\n`;\nexport const MovieCard = styled.div`\n  display: flex;\n  gap: 20px;\n`;\n\nexport const MovieDescription = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: #250c27;\n`;\n\nexport const StyledLink = styled(NavLink)`\n  display: block;\n  padding: 8px 16px;\n  width: 60px;\n  border-radius: 4px;\n  text-decoration: none;\n  color: black;\n  font-weight: 500;\n  padding: 10px 20px;\n  font-size: 18px;\n  font-weight: 700;\n  text-align: center;\n\n  &.active {\n    color: #1a39a0;\n    background-color: #ffcc00;\n  }\n`;\nexport const DetalisList = styled.ul`\n  display: flex;\n  list-style: none;\n`;\n\nexport const TextDescription = styled.p`\n  color: #4a4646;\n  font-size: 18px;\n  line-height: 1.67;\n  font-weight: 500;\n`;\n","import { Suspense } from 'react';\nimport { Outlet, useParams, useLocation } from 'react-router-dom';\nimport { TiArrowBackOutline } from 'react-icons/ti';\nimport * as TMDB from '../../api-service/film-service';\nimport defaulImage from '../../image/dog-loader.jpg';\nimport { useState, useEffect } from 'react';\nimport {\n  StyledLink,\n  BackLink,\n  MovieCard,\n  MovieDescription,\n  TextDescription,\n  DetalisList,\n} from './MovieDetalis.styled';\n\nconst MovieDetalis = () => {\n  const [detalisMovie, setDetalisMovie] = useState([]);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!movieId) {\n        return;\n      }\n      try {\n        const data = await TMDB.getMovieDetails(movieId);\n        // console.log(data);\n        setDetalisMovie(data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  const { title, poster_path, vote_average, overview, genres } = detalisMovie;\n\n  return (\n    <main>\n      <BackLink to={backLinkHref}>\n        <TiArrowBackOutline size={24} />\n        Go to back\n      </BackLink>\n\n      {\n        <>\n          <MovieCard>\n            <img\n              src={\n                poster_path\n                  ? `http://image.tmdb.org/t/p/w500${poster_path}`\n                  : defaulImage\n              }\n              width=\"340px\"\n              alt={title}\n            />\n            <MovieDescription>\n              <h2>{title}</h2>\n              <TextDescription>\n                User score: <span>{vote_average} %</span>\n              </TextDescription>\n              <h3>Overview</h3>\n              <TextDescription>{overview}</TextDescription>\n              <h3>Genres</h3>\n              {genres && (\n                <TextDescription>\n                  {genres.map(({ name }) => name).join(' ')}\n                </TextDescription>\n              )}\n            </MovieDescription>\n          </MovieCard>\n          <TextDescription>Additional information</TextDescription>\n        </>\n      }\n      <DetalisList>\n        <li key=\"cast\">\n          <StyledLink to=\"cast\" state={{ from: '/' }}>\n            Cast\n          </StyledLink>\n        </li>\n        <li key=\"reviews\">\n          <StyledLink to=\"reviews\" state={{ from: '/' }}>\n            Reviews\n          </StyledLink>\n        </li>\n      </DetalisList>\n      <Suspense fallback={<div>Loading detalis...</div>}>\n        <Outlet id={movieId} />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MovieDetalis;\n"],"names":["axios","api_key","language","include_adult","getTrandingMovies","response","data","results","getSearchMovie","query","getMovieDetails","movieId","getMovieRoles","cast","getMovieReviews","BackLink","styled","NavLink","MovieCard","MovieDescription","StyledLink","DetalisList","TextDescription","useState","detalisMovie","setDetalisMovie","useParams","backLinkHref","useLocation","state","from","useEffect","fetchData","TMDB","console","log","title","poster_path","vote_average","overview","genres","to","size","src","defaulImage","width","alt","map","name","join","Suspense","fallback","id"],"sourceRoot":""}