{"version":3,"file":"static/js/912.08b116ea.chunk.js","mappings":"mTAGAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACpBC,QAHY,mCAIZC,SAAU,QACVC,eAAe,GAGZ,IAAMC,EAAiB,mCAAG,oGACRJ,EAAAA,EAAAA,IAAA,oBADQ,cACzBK,EADyB,yBAKxBA,EAASC,KAAKC,SALU,2CAAH,qDAQjBC,EAAc,mCAAG,WAAOC,GAAP,uFACHT,EAAAA,EAAAA,IAAA,6BACGS,IAFA,cACpBJ,EADoB,yBAKjBA,EAASC,KAAKC,SALG,2CAAH,sDAQdG,EAAe,mCAAG,WAAOC,GAAP,uFACJX,EAAAA,EAAAA,IAAA,gBACVW,IAFc,cACrBN,EADqB,yBAKlBA,EAASC,MALS,2CAAH,sDAQfM,EAAa,mCAAG,WAAOD,GAAP,uFACFX,EAAAA,EAAAA,IAAA,gBACVW,EADU,aADE,cACnBN,EADmB,yBAKhBA,EAASC,KAAKO,MALE,2CAAH,sDAQbC,EAAe,mCAAG,WAAOH,GAAP,uFACJX,EAAAA,EAAAA,IAAA,gBACVW,EADU,aADI,cACrBN,EADqB,yBAKlBA,EAASC,KAAKC,SALI,2CAAH,qD,6KCxCfQ,EAAWC,EAAAA,GAAAA,GAAH,oJASRC,EAAkBD,EAAAA,GAAAA,EAAH,wI,SCuC5B,EA5Ca,WACX,IAAQL,GAAYO,EAAAA,EAAAA,MAAZP,QACR,GAA0BQ,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,uFACXZ,EADW,0EAKKa,EAAAA,GAAmBb,GALxB,OAKRL,EALQ,OAQde,EAASf,GARK,gDAUdmB,QAAQC,IAAR,MAVc,yDAAH,qDAafH,GACD,GAAE,CAACZ,KAGF,SAACI,EAAD,UACGK,EACGA,EAAMO,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,UAApC,OACR,2BACE,gBACEC,IACEH,EAAY,wCACyBA,GACjCI,EAENC,MAAM,QACNC,IAAKL,KAEP,SAACb,EAAD,UAAkBa,KAClB,SAACb,EAAD,UAAkBc,MAXXH,EADD,IAeV,MAGT,C","sources":["api-service/film-service.js","pages/MovieDetalis/Cast/Cast.styled.jsx","pages/MovieDetalis/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'bcffd2e7e681aa94b83a55719216dc7b';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n    api_key: API_KEY,\n    language: 'en-US',\n    include_adult: false,\n  };\n\nexport const getTrandingMovies = async () => {\n  const response = await axios.get(\n    `trending/all/day`\n  );\n  // console.log(response)\n  return response.data.results;\n}\n\nexport const getSearchMovie = async (query) => {\n    const response = await axios.get(\n        `search/movie?query=${query}`\n      );\n      // console.log(response.data.results)\n      return response.data.results;\n}\n\nexport const getMovieDetails = async (movieId) => {\n    const response = await axios.get(\n        `movie/${movieId}`\n      );\n      // console.log(response.data)\n      return response.data;\n}\n\nexport const getMovieRoles = async (movieId) => {\n    const response = await axios.get(\n        `movie/${movieId}/credits`\n      );\n      // console.log(response.data.cast)\n      return response.data.cast;\n}\n\nexport const getMovieReviews = async (movieId) => {\n    const response = await axios.get(\n        `movie/${movieId}/reviews`\n      );\n      // console.log(response.data.results)\n      return response.data.results;\n}","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: 20px;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n`;\n\nexport const CastDescription = styled.p`\n  color: #4a4646;\n  font-size: 16px;\n  line-height: 1.3;\n  font-weight: 500;\n  margin: 0;\n  padding: 3px;\n`;\n","import { useParams } from 'react-router-dom';\nimport defaulImage from '../../../image/cats-4945658_960_720.png';\nimport { useEffect, useState } from 'react';\nimport * as TMDB from '../../../api-service/film-service';\nimport { CastList, CastDescription } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [casts, setCasts] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!movieId) {\n        return;\n      }\n      try {\n        const data = await TMDB.getMovieRoles(movieId);\n        // console.log(data);\n\n        setCasts(data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  return (\n    <CastList>\n      {casts\n        ? casts.map(({ id, profile_path, original_name, character }) => (\n            <li key={id}>\n              <img\n                src={\n                  profile_path\n                    ? `http://image.tmdb.org/t/p/w500${profile_path}`\n                    : defaulImage\n                }\n                width=\"100px\"\n                alt={original_name}\n              />\n              <CastDescription>{original_name}</CastDescription>\n              <CastDescription>{character}</CastDescription>\n            </li>\n          ))\n        : null}\n    </CastList>\n  );\n};\n\nexport default Cast;\n"],"names":["axios","api_key","language","include_adult","getTrandingMovies","response","data","results","getSearchMovie","query","getMovieDetails","movieId","getMovieRoles","cast","getMovieReviews","CastList","styled","CastDescription","useParams","useState","casts","setCasts","useEffect","fetchData","TMDB","console","log","map","id","profile_path","original_name","character","src","defaulImage","width","alt"],"sourceRoot":""}