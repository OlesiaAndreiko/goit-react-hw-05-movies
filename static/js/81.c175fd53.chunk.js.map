{"version":3,"file":"static/js/81.c175fd53.chunk.js","mappings":"kTAGAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACpBC,QAHY,mCAIZC,SAAU,QACVC,eAAe,GAGZ,IAAMC,EAAiB,mCAAG,oGACRJ,EAAAA,EAAAA,IAAA,oBADQ,cACzBK,EADyB,yBAKxBA,EAASC,KAAKC,SALU,2CAAH,qDAQjBC,EAAc,mCAAG,WAAOC,GAAP,uFACHT,EAAAA,EAAAA,IAAA,6BACGS,IAFA,cACpBJ,EADoB,yBAKjBA,EAASC,KAAKC,SALG,2CAAH,sDAQdG,EAAe,mCAAG,WAAOC,GAAP,uFACJX,EAAAA,EAAAA,IAAA,gBACVW,IAFc,cACrBN,EADqB,yBAKlBA,EAASC,MALS,2CAAH,sDAQfM,EAAa,mCAAG,WAAOD,GAAP,uFACFX,EAAAA,EAAAA,IAAA,gBACVW,EADU,aADE,cACnBN,EADmB,yBAKhBA,EAASC,KAAKO,MALE,2CAAH,sDAQbC,EAAe,mCAAG,WAAOH,GAAP,uFACJX,EAAAA,EAAAA,IAAA,gBACVW,EADU,aADI,cACrBN,EADqB,yBAKlBA,EAASC,KAAKC,SALI,2CAAH,qD,+JCpBfQ,GAnBSC,EAAAA,GAAAA,OAAH,icAmBOA,EAAAA,GAAAA,KAAAA,MAAkB,CAAEC,aAAc,OAAlCD,CAAH,ijBAoBVE,EAAkBF,EAAAA,GAAAA,MAAAA,MAAmB,CAChDG,KAAM,OACNC,YAAa,oBAFgBJ,CAAH,yQAoBfK,EAAmBL,EAAAA,GAAAA,OAAAA,MAAoB,CAAEG,KAAM,UAA5BH,CAAH,qVAmBhBM,GAAON,EAAAA,EAAAA,IAAOO,EAAAA,IAAPP,CAAH,2G,SCzEJQ,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAW1B,OACI,UAACV,EAAD,CAAYW,SAVK,SAAAC,GACnBA,EAAMC,iBAEN,IAAQnB,EAAUkB,EAAME,OAAOC,SAAvBrB,MACRgB,EAAShB,EAAMsB,OAEfJ,EAAME,OAAOG,OACd,EAGG,WACE,SAACd,EAAD,CAAiBe,KAAK,WACtB,SAACZ,EAAD,WACE,SAACC,EAAD,QAIT,E,kDCxBYY,EAAalB,EAAAA,GAAAA,GAAH,kGAKVmB,EAAanB,EAAAA,GAAAA,GAAH,wWAkBVoB,GAAapB,EAAAA,EAAAA,IAAOqB,EAAAA,GAAPrB,CAAH,qFAMVsB,EAAgBtB,EAAAA,GAAAA,IAAH,2HAObuB,EAAYvB,EAAAA,GAAAA,EAAH,mICmCtB,EA5De,WAAO,IAAD,EACnB,GAAkCwB,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMpC,EAAK,UAAGmC,EAAaE,IAAI,qBAApB,QAAqC,IAEhDC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,6GAEKC,EAAAA,GAAoBxC,GAFzB,OAERH,EAFQ,OAKdoC,EAAapC,GALC,gDAOd4C,QAAQC,IAAR,MACAC,EAAAA,GAAAA,MAAY,kCARE,yDAAH,qDAYX3C,GACFuC,EAAUvC,EAEb,GAAE,CAACA,IAOJ,OACE,6BACE,SAACe,EAAD,CAAWC,SAPE,SAAA4B,GAEfR,EADkC,KAAfQ,EAAoB,CAAEA,WAAAA,GAAe,CAAC,EAE1D,KAKG,SAACnB,EAAD,UACGO,EACGA,EAAUa,KAAI,SAAAC,GAAI,OAChB,SAACpB,EAAD,WACE,UAACC,EAAD,CACEoB,GAAE,kBAAaD,EAAKE,IACpBC,MAAO,CAAEC,KAAK,sBAAD,OAAwBlD,IAFvC,WAIE,SAAC6B,EAAD,CACEsB,IACEL,EAAKM,cAAL,wCACqCN,EAAKM,eACtCC,EAENC,MAAM,QACNC,IAAKT,EAAKU,OAASV,EAAKtB,QAE1B,SAACM,EAAD,UAAYgB,EAAKU,OAASV,EAAKtB,WAdlBsB,EAAKE,GADN,IAmBlB,QAEN,SAAC,KAAD,MAGL,C","sources":["api-service/film-service.js","components/SearchBar/SearchBar.styled.jsx","components/SearchBar/SearchBar.jsx","pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'bcffd2e7e681aa94b83a55719216dc7b';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n    api_key: API_KEY,\n    language: 'en-US',\n    include_adult: false,\n  };\n\nexport const getTrandingMovies = async () => {\n  const response = await axios.get(\n    `trending/all/day`\n  );\n  // console.log(response)\n  return response.data.results;\n}\n\nexport const getSearchMovie = async (query) => {\n    const response = await axios.get(\n        `search/movie?query=${query}`\n      );\n      // console.log(response.data.results)\n      return response.data.results;\n}\n\nexport const getMovieDetails = async (movieId) => {\n    const response = await axios.get(\n        `movie/${movieId}`\n      );\n      // console.log(response.data)\n      return response.data;\n}\n\nexport const getMovieRoles = async (movieId) => {\n    const response = await axios.get(\n        `movie/${movieId}/credits`\n      );\n      // console.log(response.data.cast)\n      return response.data.cast;\n}\n\nexport const getMovieReviews = async (movieId) => {\n    const response = await axios.get(\n        `movie/${movieId}/reviews`\n      );\n      // console.log(response.data.results)\n      return response.data.results;\n}","import styled from 'styled-components';\nimport { ImSearch } from 'react-icons/im';\n\nexport const Header = styled.header`\n  top: 0;\n  left: 0;\n  position: sticky;\n  z-index: 1100;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 64px;\n  padding-right: 24px;\n  padding-left: 24px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  color: #fff;\n  background-color: #666782;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const SearchForm = styled.form.attrs({ autoComplete: 'off' })`\n  display: flex;\n  align-items: center;\n  min-height: 54px;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 4px;\n  /* border: 1px solid rgb(37, 12, 39); */\n  overflow: hidden;\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n\n  &:hover {\n    border: 1px solid transparent;\n    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n  }\n`;\n\nexport const SearchFormInput = styled.input.attrs({\n  type: 'text',\n  placeholder: 'Search movies...'\n})`\n  display: inline-block;\n  width: 100%;\n  height: 30px;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding: 4px;\n  padding-left: 10px;\n\n  &::placeholder {\n    font: inherit;\n    font-size: 20px;\n  }\n`;\n\nexport const SearchFormButton = styled.button.attrs({ type: 'submit' })`\nposition: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 52px;\n  height: 52px;\n  border: transparent;\n  opacity: 0.6;\n  padding: 10px;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const Icon = styled(ImSearch)`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  top: 30%;\n  left: 30%;\n`;","import PropTypes from 'prop-types';\nimport {\n  SearchForm,\n  SearchFormButton,\n  SearchFormInput,\n  Icon,\n} from './SearchBar.styled';\n\nexport const SearchBar = ({ onSearch }) => {\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const { query } = event.target.elements;\n    onSearch(query.value);\n\n    event.target.reset();\n  };\n\n  return (\n      <SearchForm onSubmit={handleSubmit}>\n        <SearchFormInput name=\"query\" />\n        <SearchFormButton>\n          <Icon />\n        </SearchFormButton>\n      </SearchForm>\n  );\n};\n\nSearchBar.propTypes ={\n  onSearch: PropTypes.func.isRequired,\n}","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const SearchList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 20px;\n`;\nexport const SearchItem = styled.li`\n  display: flex;\n  align-items: center;\n  width: 250px;\n  gap: 10px;\n  font-size: 15px;\n  font-style: normal;\n  font-weight: 700;\n  line-height: 1.2;\n  cursor: pointer;\n  transition: all 0.3s ease-in-out;\n  box-shadow: 0 0 rgb(0 0 0 / 0%);\n\n  &:hover {\n    transform: scale(0.97);\n    box-shadow: 0 0 15px 3px #000;\n  }\n`;\nexport const StyledLink = styled(NavLink)`\n  text-decoration: none;\n  width: 100%;\n  color: #141314;\n`;\n\nexport const PreviewPoster = styled.img`\n  display: block;\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n  padding-bottom: 12px;\n`;\nexport const NameMovie = styled.p`\n  text-transform: uppercase;\n  width: 250px;\n  margin: 0;\n  padding-left: 10px;\n  margin-bottom: 3px;\n`;\n","import { SearchBar } from '../../components/SearchBar/SearchBar';\nimport * as TMDB from '../../api-service/film-service';\nimport defaulImage from '../../image/cat-6747298_960_720.jpg';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { useSearchParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport {\n  SearchList,\n  SearchItem,\n  StyledLink,\n  PreviewPoster,\n  NameMovie,\n} from './Movies.styled';\n\nconst Movies = () => {\n  const [movieList, setMovieList] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('searchWord') ?? '';\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await TMDB.getSearchMovie(query);\n        // console.log(data);\n\n        setMovieList(data);\n      } catch (error) {\n        console.log(error);\n        toast.error('Something is wrong, try again.');\n      }\n    };\n\n    if (query) {\n      fetchData(query);\n    }\n  }, [query]);\n\n  const getQuery = searchWord => {\n    const nextParams = searchWord !== '' ? { searchWord } : {};\n    setSearchParams(nextParams);\n  };\n\n  return (\n    <main>\n      <SearchBar onSearch={getQuery}></SearchBar>\n      <SearchList>\n        {movieList\n          ? movieList.map(film => (\n              <SearchItem key={film.id}>\n                <StyledLink\n                  to={`/movies/${film.id}`}\n                  state={{ from: `/movies?searchWord=${query}` }}\n                >\n                  <PreviewPoster\n                    src={\n                      film.backdrop_path\n                        ? `http://image.tmdb.org/t/p/w500${film.backdrop_path}`\n                        : defaulImage\n                    }\n                    width=\"150px\"\n                    alt={film.title || film.name}\n                  />\n                  <NameMovie>{film.title || film.name}</NameMovie>\n                </StyledLink>\n              </SearchItem>\n            ))\n          : null}\n      </SearchList>\n      <Toaster />\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["axios","api_key","language","include_adult","getTrandingMovies","response","data","results","getSearchMovie","query","getMovieDetails","movieId","getMovieRoles","cast","getMovieReviews","SearchForm","styled","autoComplete","SearchFormInput","type","placeholder","SearchFormButton","Icon","ImSearch","SearchBar","onSearch","onSubmit","event","preventDefault","target","elements","value","reset","name","SearchList","SearchItem","StyledLink","NavLink","PreviewPoster","NameMovie","useState","movieList","setMovieList","useSearchParams","searchParams","setSearchParams","get","useEffect","fetchData","TMDB","console","log","toast","searchWord","map","film","to","id","state","from","src","backdrop_path","defaulImage","width","alt","title"],"sourceRoot":""}