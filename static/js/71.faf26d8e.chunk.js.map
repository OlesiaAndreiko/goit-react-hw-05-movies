{"version":3,"file":"static/js/71.faf26d8e.chunk.js","mappings":"8SAGAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACpBC,QAHY,mCAIZC,SAAU,QACVC,eAAe,GAIZ,IAAMC,EAAiB,mCAAG,oGACRJ,EAAAA,EAAAA,IAAA,oBADQ,cACzBK,EADyB,yBAKxBA,EAASC,KAAKC,SALU,2CAAH,qDAQjBC,EAAc,mCAAG,WAAOC,GAAP,uFACHT,EAAAA,EAAAA,IAAA,6BACGS,IAFA,cACpBJ,EADoB,yBAKjBA,EAASC,KAAKC,SALG,2CAAH,sDAQdG,EAAe,mCAAG,WAAOC,GAAP,uFACJX,EAAAA,EAAAA,IAAA,gBACVW,IAFc,cACrBN,EADqB,yBAKlBA,EAASC,MALS,2CAAH,sDAQfM,EAAa,mCAAG,WAAOD,GAAP,uFACFX,EAAAA,EAAAA,IAAA,gBACVW,EADU,aADE,cACnBN,EADmB,yBAKhBA,EAASC,KAAKO,MALE,2CAAH,sDAQbC,EAAe,mCAAG,WAAOH,GAAP,uFACJX,EAAAA,EAAAA,IAAA,gBACVW,EADU,aADI,cACrBN,EADqB,yBAKlBA,EAASC,KAAKC,SALI,2CAAH,qD,+ICxCfQ,EAASC,EAAAA,GAAAA,OAAH,icAmBNC,EAAaD,EAAAA,GAAAA,KAAAA,MAAkB,CAAEE,aAAc,OAAlCF,CAAH,8KAUVG,EAAkBH,EAAAA,GAAAA,MAAAA,MAAmB,CAChDI,KAAM,OACNC,YAAa,oBAFgBL,CAAH,kPAmBfM,EAAmBN,EAAAA,GAAAA,OAAAA,MAAoB,CAAEI,KAAM,UAA5BJ,CAAH,qVAmBhBO,GAAOP,EAAAA,EAAAA,IAAOQ,EAAAA,IAAPR,CAAH,2G,SC7DJS,EAAc,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAW5B,OACE,SAACX,EAAD,WACE,UAACE,EAAD,CAAYU,SAXK,SAAAC,GACnBA,EAAMC,iBAEN,IAAQpB,EAAUmB,EAAME,OAAOC,SAAvBtB,MACRiB,EAASjB,EAAMuB,OAEfJ,EAAME,OAAOG,OACd,EAIG,WACE,SAACd,EAAD,CAAiBe,KAAK,WACtB,SAACZ,EAAD,WACE,SAACC,EAAD,UAKT,E,mCC+BD,EAvDe,WAAO,IAAD,EACnB,GAAkCY,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEM/B,EAAK,UAAG8B,EAAaE,IAAI,qBAApB,QAAqC,IAEhDC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,6GAGKC,EAAAA,GAAoBnC,GAHzB,OAGRH,EAHQ,OAMd+B,EAAa/B,GANC,gDAQduC,QAAQC,IAAR,MARc,yDAAH,qDAYXrC,GACFkC,EAAUlC,EAGb,GAAE,CAACA,IAOJ,OACE,6BACE,SAACgB,EAAD,CAAaC,SAPA,SAACqB,GAEhBP,EADkC,KAAfO,EAAoB,CAAEA,WAAAA,GAAe,CAAC,EAE1D,KAKG,wBACGX,EACDA,EAAUY,KAAI,SAAAC,GAAI,OAChB,yBACA,UAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAAEC,KAAK,sBAAD,OAAwB5C,IAArE,UAAiFwC,EAAKK,OAASL,EAAKf,MACpG,gBACMqB,IACEN,EAAKO,cAAL,wCACqCP,EAAKO,eACtCC,EAENC,MAAM,QACNC,IAAKV,EAAKK,OAASL,EAAKf,WATrBe,EAAKE,GADE,IAaZ,SAKb,C","sources":["api-service/film-service.js","components/SearchMovie/SearchBar.styled.jsx","components/SearchMovie/SearchBar.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'bcffd2e7e681aa94b83a55719216dc7b';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n    api_key: API_KEY,\n    language: 'en-US',\n    include_adult: false,\n    // limit: 40,\n  };\n\nexport const getTrandingMovies = async () => {\n  const response = await axios.get(\n    `trending/all/day`\n  );\n  // console.log(response)\n  return response.data.results;\n}\n\nexport const getSearchMovie = async (query) => {\n    const response = await axios.get(\n        `search/movie?query=${query}`\n      );\n      // console.log(response.data.results)\n      return response.data.results;\n}\n\nexport const getMovieDetails = async (movieId) => {\n    const response = await axios.get(\n        `movie/${movieId}`\n      );\n      // console.log(response.data)\n      return response.data;\n}\n\nexport const getMovieRoles = async (movieId) => {\n    const response = await axios.get(\n        `movie/${movieId}/credits`\n      );\n      // console.log(response.data.cast)\n      return response.data.cast;\n}\n\nexport const getMovieReviews = async (movieId) => {\n    const response = await axios.get(\n        `movie/${movieId}/reviews`\n      );\n      // console.log(response.data.results)\n      return response.data.results;\n}","import styled from 'styled-components';\nimport { ImSearch } from 'react-icons/im';\n\nexport const Header = styled.header`\n  top: 0;\n  left: 0;\n  position: sticky;\n  z-index: 1100;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 64px;\n  padding-right: 24px;\n  padding-left: 24px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  color: #fff;\n  background-color: #666782;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const SearchForm = styled.form.attrs({ autoComplete: 'off' })`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const SearchFormInput = styled.input.attrs({\n  type: 'text',\n  placeholder: 'Search movies...'\n})`\n  display: inline-block;\n  width: 100%;\n  height: 30px;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding: 4px;\n\n  &::placeholder {\n    font: inherit;\n    font-size: 22px;\n  }\n`;\n\nexport const SearchFormButton = styled.button.attrs({ type: 'submit' })`\nposition: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 48px;\n  height: 48px;\n  border: transparent;\n  opacity: 0.6;\n  padding: 10px;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const Icon = styled(ImSearch)`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  top: 30%;\n  left: 30%;\n`;","// import PropTypes from 'prop-types';\nimport {\n  Header,\n  SearchForm,\n  SearchFormButton,\n  SearchFormInput,\n  Icon,\n} from './SearchBar.styled';\n\nexport const SearchMovie = ({ onSearch }) => {\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const { query } = event.target.elements;\n    onSearch(query.value);\n\n    event.target.reset();\n  };\n\n  return (\n    <Header>\n      <SearchForm onSubmit={handleSubmit}>\n        <SearchFormInput name=\"query\" />\n        <SearchFormButton>\n          <Icon />\n        </SearchFormButton>\n      </SearchForm>\n    </Header>\n  );\n};\n","import { SearchMovie } from '../components/SearchMovie/SearchBar';\nimport * as TMDB from '../api-service/film-service';\nimport defaulImage from '../helpers/cat-6747298_960_720.jpg'\nimport { Link, useSearchParams} from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nconst Movies = () => {\n  const [movieList, setMovieList] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get(\"searchWord\") ?? \"\";\n\n  useEffect(() => {\n    const fetchData = async () => {\n    \n      try {\n        const data = await TMDB.getSearchMovie(query);\n        // console.log(data);\n\n        setMovieList(data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    if (query) {\n      fetchData(query);\n    }\n    \n  }, [query]);\n\n  const getQuery = (searchWord) => {\n    const nextParams = searchWord !== \"\" ? { searchWord } : {};\n    setSearchParams(nextParams);\n  };\n\n  return (\n    <main>\n      <SearchMovie onSearch={getQuery} ></SearchMovie>\n      <ul>\n        {movieList?\n        movieList.map(film =>\n          <li key={film.id}>\n          <Link to={`/movies/${film.id}`} state={{ from: `/movies?searchWord=${query}`}} >{film.title || film.name}\n          <img\n                src={\n                  film.backdrop_path\n                    ? `http://image.tmdb.org/t/p/w500${film.backdrop_path}`\n                    : defaulImage\n                }\n                width=\"150px\"\n                alt={film.title || film.name}\n              /></Link>\n        </li>\n          ) : null\n        }       \n      </ul>\n    </main>\n  );\n};\n\nexport default Movies;"],"names":["axios","api_key","language","include_adult","getTrandingMovies","response","data","results","getSearchMovie","query","getMovieDetails","movieId","getMovieRoles","cast","getMovieReviews","Header","styled","SearchForm","autoComplete","SearchFormInput","type","placeholder","SearchFormButton","Icon","ImSearch","SearchMovie","onSearch","onSubmit","event","preventDefault","target","elements","value","reset","name","useState","movieList","setMovieList","useSearchParams","searchParams","setSearchParams","get","useEffect","fetchData","TMDB","console","log","searchWord","map","film","to","id","state","from","title","src","backdrop_path","defaulImage","width","alt"],"sourceRoot":""}